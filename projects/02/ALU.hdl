// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *      - 0, 1, -1,
 *      - x, y, !x, !y, -x, -y,
 *      - x + 1, y + 1, x - 1, y - 1,
 *      - x + y, x - y, y - x,
 *      - x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */

// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],   // 16-bit inputs        
        zx,             // zero the x input?
        nx,             // negate the x input?
        zy,             // zero the y input?
        ny,             // negate the y input?
        f,              // compute (out = x + y) or (out = x & y)?
        no;             // negate the out output?
    OUT 
        out[16],        // 16-bit output
        zr,             // if (out == 0) equals 1, else 0
        ng;             // if (out < 0)  equals 1, else 0

    PARTS:
    
    // Work with x input
    Mux16(a=x, b=false, sel=zx, out=xOrZero);
    Not16(in=xOrZero, out=notx);
    Mux16(a=xOrZero, b=notx, sel=nx, out=xmux);

    // Work with y input
    Mux16(a=y, b=false, sel=zy, out=yOrZero);
    Not16(in=yOrZero, out=noty);
    Mux16(a=yOrZero, b=noty, sel=ny, out=ymux);

    // Work with f bit
    Add16(a=xmux, b=ymux, out=xysum);
    And16(a=xmux, b=ymux, out=xyand);
    Mux16(a=xyand, b=xysum, sel=f, out=xyf);

    // Work with no bit
    Not16(in=xyf, out=notxyf);
    Mux16(a=xyf, b=notxyf, sel=no, out[0..7]=outLSB, out[8..14]=outMSB, out[15]=outMSBit);
    Mux16(a=xyf, b=notxyf, sel=no, out=out);

    // Work with zr bit
    Or8Way(in[0..7]=outLSB, out=orzr1);
    Or8Way(in[0..6]=outMSB, in[7]=outMSBit, out=orzr2);
    Or(a=orzr1, b=orzr2, out=orzr);
    Not(in=orzr, out=zr);

    // Work with ng bit
    Or(a=outMSBit, b=false, out=ng);
}